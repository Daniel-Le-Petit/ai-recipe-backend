'use strict';

const { OpenAI } = require('openai'); // Correct import for OpenAI v4+/v5+

// Initialize OpenAI with your API key
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

module.exports = {
  async generate(ctx) {
    const { ingredients } = ctx.request.body; // Expects ingredients array
    const model = 'gpt-3.5-turbo'; // Or 'gpt-4' for better quality if available and preferred

    if (!ingredients || !Array.isArray(ingredients) || ingredients.length === 0) {
      return ctx.badRequest('Ingredients must be an array of strings.');
    }

    const prompt = `Generate a unique and delicious recipe with the following ingredients: ${ingredients.join(', ')}.
    The recipe should include:
    1. A catchy title.
    2. A brief description (1-2 sentences).
    3. A list of all ingredients (including common pantry staples like salt, pepper, oil if needed).
    4. Step-by-step instructions.
    Format the output as a JSON object with keys: title, description, ingredients (array of strings), and instructions (array of strings).`;

    try {
      const completion = await openai.chat.completions.create({ // Correct method for v4+/v5+
        model: model,
        messages: [{ role: 'user', content: prompt }],
        response_format: { type: "json_object" }, // Available in v4+/v5+
      });

      const generatedContent = completion.choices[0].message.content;
      const parsedRecipe = JSON.parse(generatedContent); // Parse the JSON string from OpenAI

      ctx.body = { recipe: parsedRecipe };

    } catch (error) {
      console.error('Error generating recipe:', error);
      if (error.response) { // Standard error handling for v4+/v5+
        console.error('OpenAI API error response:', error.response.data);
        return ctx.internalServerError('Error from OpenAI API.', { details: error.response.data });
      } else {
        return ctx.internalServerError('Failed to generate recipe.', { details: error.message });
      }
    }
  },
};