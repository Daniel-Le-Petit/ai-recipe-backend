const API_URL = 'http://localhost:1338';

async function testFrontendAPI() {
  console.log('üß™ Test de l\'API frontend avec recipeState...\n');

  try {
    // 1. Test de r√©cup√©ration de toutes les recettes
    console.log('1Ô∏è‚É£ R√©cup√©ration de toutes les recettes...');
    const allRecipesResponse = await fetch(`${API_URL}/api/recipies?populate=*`);
    
    if (!allRecipesResponse.ok) {
      throw new Error(`Erreur r√©cup√©ration: ${allRecipesResponse.status}`);
    }

    const allRecipes = await allRecipesResponse.json();
    console.log(`‚úÖ ${allRecipes.data?.length || 0} recettes trouv√©es`);

    // Afficher les champs disponibles pour la premi√®re recette
    if (allRecipes.data && allRecipes.data.length > 0) {
      const firstRecipe = allRecipes.data[0];
      console.log('\nüîç Champs disponibles dans la premi√®re recette:');
      console.log('Attributs:', Object.keys(firstRecipe.attributes));
      
      if (firstRecipe.attributes.recipeState) {
        console.log(`‚úÖ recipeState: ${firstRecipe.attributes.recipeState}`);
      } else if (firstRecipe.attributes.status) {
        console.log(`‚ö†Ô∏è status (ancien): ${firstRecipe.attributes.status}`);
      } else {
        console.log('‚ùå Aucun champ de statut trouv√©');
      }
    }

    // 2. Test de filtrage par recipeState
    console.log('\n2Ô∏è‚É£ Test de filtrage par recipeState...');
    const filterResponse = await fetch(`${API_URL}/api/recipies?filters[recipeState][$eq]=submitted&populate=*`);
    
    if (!filterResponse.ok) {
      throw new Error(`Erreur filtrage: ${filterResponse.status}`);
    }

    const filteredRecipes = await filterResponse.json();
    console.log(`‚úÖ Recettes avec recipeState "submitted": ${filteredRecipes.data?.length || 0}`);

    // 3. Test de filtrage par status (ancien) pour voir si √ßa fonctionne encore
    console.log('\n3Ô∏è‚É£ Test de filtrage par status (ancien)...');
    const oldFilterResponse = await fetch(`${API_URL}/api/recipies?filters[status][$eq]=submitted&populate=*`);
    
    if (!oldFilterResponse.ok) {
      console.log(`‚ùå Filtrage par status √©choue: ${oldFilterResponse.status}`);
    } else {
      const oldFilteredRecipes = await oldFilterResponse.json();
      console.log(`‚ö†Ô∏è Recettes avec status "submitted": ${oldFilteredRecipes.data?.length || 0}`);
    }

    // 4. Test de cr√©ation d'une recette avec recipeState
    console.log('\n4Ô∏è‚É£ Test de cr√©ation avec recipeState...');
    const createResponse = await fetch(`${API_URL}/api/recipies`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        data: {
          title: 'Test Frontend API',
          description: 'Test de l\'API frontend avec recipeState',
          recipeState: 'submitted'
        }
      })
    });

    if (!createResponse.ok) {
      const errorText = await createResponse.text();
      console.error(`‚ùå Erreur cr√©ation: ${createResponse.status} - ${errorText}`);
    } else {
      const createdRecipe = await createResponse.json();
      console.log(`‚úÖ Recette cr√©√©e avec ID: ${createdRecipe.data.id}`);
      console.log(`   recipeState: ${createdRecipe.data.attributes.recipeState}`);

      // Nettoyer - supprimer la recette de test
      const deleteResponse = await fetch(`${API_URL}/api/recipies/${createdRecipe.data.id}`, {
        method: 'DELETE'
      });
      
      if (deleteResponse.ok) {
        console.log('‚úÖ Recette de test supprim√©e');
      }
    }

    console.log('\nüéâ Test de l\'API frontend termin√© !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error.message);
  }
}

// Ex√©cuter le test
testFrontendAPI(); 